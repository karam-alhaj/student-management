public class reg{
        private generalIdea studentHead; // students
        private generalIdea courseHead; // courses
        private generalIdea lastStudentAdded; // students
        private generalIdea lastCourseAdded; // courses

public UniversityRegistrationSystem() {
        studentHead = null;
        courseHead = null;
        lastStudentAdded = null;
        lastCourseAdded = null;
    }

private static class generalIdea {
        int ID;
        Course_StudentEnrollmentNode enrolled;
        Course_Student Node nextCourse_student;

        Studen_CoursestNode(int id) {
            this.ID = id;
            enrolled = null;
            nextCourse_Student = null;
        }

private static class Course_StudentEnrollmentNode {
        int ID;
        Course_StudentEnrollmentNode next;

        Course_StudentEnrollmentNode(int id) {
            this.ID = id;
            next = null;
        }
    }
}

 public void listcoursebyStuID(int ID) {
        generalIdea student = Fstu(tID);
        if (student == null) {
            System.out.println("unable to find Student "+ ID);
            return;
        }
        System.out.print("Student " + ID + "  is enrolled in courses: ");
        StudentCourseNode pointer = student.enrolled; // courses 
        while (pointer != null) {
            System.out.print(pointer.ID + "-"); //courses ID
            pointer = pointer.next;
        }
    }

 public void listStudByCourseID(int ID) {
        generalIdea course = Fcourse(ID);
        if (course == null) {
            System.out.println("unable to find Course "+ ID);
            return;
        }
        System.out.print("Course " + courseID + " has enrolled students ");
        CourseStudentNode pointer = course.enrolled; // students
        while (pointer != null) {
            System.out.print(pointer.ID + " "); // student ID
            pointer = pointer.next;
        }
    }

private generalidea Fstud(int ID) {
        generalIdea pointer = studentHead;
        while (pointer != null) {
            if (pointer.ID == ID) // student ID
                return pointer;
            pointer = pointer.next;
        }
        return null;
    }

 private generalidea FCourse(int ID) {
        generalIdea pointer = courseHead;
        while (pointer != null) {
            if (pointer.ID == ID) //course ID
                return pointer;
            pointer = pointer.next;
        }
        return null;
    }
 private Course_StudentEnrollmentNode bubbleSortCourses(Course_StudentEnrollmentNode head) {
        if (head == null) return null;
        boolean swapped;
        do {
            swapped = false;
            Course_StudentEnrollmentNode curr = head;
            Course_StudentEnrollmentNode prev = null;
            while (curr != null && curr.next != null) {
                if (current.ID > curr.next.ID) {
                    if (prev == null) {
                        Course_StudentEnrollmentNode temp = curr.next;
                        curr.next = temp.next;
                        temp.next = curr;
                        head = temp;
                        prev = head;
                    } else {
                        Course_StudentEnrollmentNode temp = curr.next;
                        curr.next = temp.next;
                        temp.next = curr;
                        prev.next = temp;
                        prev = temp;
                    }
                    swapped = true;
                } else {
                    prev = curr;
                    curr = curr.next;
                }
            }
        } while (swapped);
        return head;
    }
}
